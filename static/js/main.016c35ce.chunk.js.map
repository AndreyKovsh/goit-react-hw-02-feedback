{"version":3,"sources":["component/FeedbackOption/FeedbackOption.js","component/Section/Section.js","component/Statistic/Statistic.js","component/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Section","title","children","Statistic","good","neutral","bad","total","positivePercentage","Notification","message","App","state","addFeedback","setState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","FeedbackOption","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAsBeA,G,MAlBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,QCOII,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASJ,UAAU,UAAnB,UACE,oBAAIA,UAAU,QAAd,SAAuBG,IACtBC,MCcQC,G,MAhBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC9C,OACE,+BACE,qBAAIV,UAAU,OAAd,mBAA4BM,KAC5B,qBAAIN,UAAU,OAAd,sBAA+BO,KAC/B,qBAAIP,UAAU,OAAd,kBAA2BQ,KAC3B,qBAAIR,UAAU,OAAd,oBAA6BS,KAC7B,qBAAIT,UAAU,OAAd,gCAAyCU,EAAzC,YCASC,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGZ,UAAU,MAAb,SAAoBY,MCoDdC,E,4MAjDbC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,YAAc,SAAAjB,GACZ,EAAKkB,UAAS,SAAAF,GAAK,sBAChBhB,EAASgB,EAAMhB,GAAU,O,EAI9BmB,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKL,OAAOM,QAAO,SAACC,EAAKvB,GAAN,OAAiBuB,EAAMvB,IAAQ,I,EAGzEwB,gCAAkC,WAAO,IAC/BhB,EAAS,EAAKQ,MAAdR,KACR,OAAOiB,KAAKC,MAAOlB,EAAO,EAAKW,qBAAwB,MAAQ,G,uDAGvD,IAAD,EACwBQ,KAAKX,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACG,qCACC,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAACuB,EAAD,CACE/B,QAASuB,OAAOS,KAAKF,KAAKX,OAC1BlB,gBAAiB6B,KAAKV,gBAG1B,cAAC,EAAD,CAASZ,MAAM,aAAf,SACGsB,KAAKR,qBACJ,cAAC,EAAD,CACEX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKR,qBACZP,mBAAoBe,KAAKH,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,+B,GA1ChBgB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.016c35ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FeedbackOptions.css';\r\nimport PT from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map(option => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn\"\r\n      key={option}\r\n      onClick={() => onLeaveFeedback(option)}\r\n    >\r\n      {option}\r\n    </button>\r\n  ));\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PT.arrayOf(PT.string.isRequired),\r\n  onLeaveFeedback: PT.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import PT from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"section\">\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PT.string.isRequired,\r\n  children: PT.node.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PT from 'prop-types';\r\nimport './Statistic.css';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li className=\"text\">Good: {good}</li>\r\n      <li className=\"text\">Neutral: {neutral}</li>\r\n      <li className=\"text\">Bad: {bad}</li>\r\n      <li className=\"text\">Total: {total}</li>\r\n      <li className=\"text\">Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistic.propTypes = {\r\n  label: PT.string.isRequired,\r\n  value: PT.number.isRequired,\r\n};\r\nexport default Statistic;","import PT from 'prop-types';\r\nimport './Notification.css';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className=\"msg\">{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PT.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import FeedbackOptions from './component/FeedbackOption/FeedbackOption';\nimport Section from './component/Section/Section';\nimport { Component } from 'react';\nimport Statistic from './component/Statistic/Statistic';\nimport Notification from './component/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  addFeedback = option => {\n    this.setState(state => ({\n      [option]: state[option] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce((acc, option) => acc + option, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return Math.round((good / this.countTotalFeedback()) * 100) || 0;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n       <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() ? (\n            <Statistic\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistic>\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}